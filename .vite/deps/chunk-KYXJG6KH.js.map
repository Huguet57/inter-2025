{
  "version": 3,
  "sources": ["../../node_modules/lucide-react/src/defaultAttributes.ts", "../../node_modules/lucide-react/src/createLucideIcon.ts"],
  "sourcesContent": ["export default {\n  xmlns: 'http://www.w3.org/2000/svg',\n  width: 24,\n  height: 24,\n  viewBox: '0 0 24 24',\n  fill: 'none',\n  stroke: 'currentColor',\n  strokeWidth: 2,\n  strokeLinecap: 'round',\n  strokeLinejoin: 'round',\n};\n", "import {\n  forwardRef,\n  createElement,\n  ReactSVG,\n  SVGProps,\n  ForwardRefExoticComponent,\n  RefAttributes,\n} from 'react';\nimport defaultAttributes from './defaultAttributes';\n\nexport type IconNode = [elementName: keyof ReactSVG, attrs: Record<string, string>][];\n\nexport type SVGAttributes = Partial<SVGProps<SVGSVGElement>>;\ntype ComponentAttributes = RefAttributes<SVGSVGElement> & SVGAttributes;\n\nexport interface LucideProps extends ComponentAttributes {\n  size?: string | number;\n  absoluteStrokeWidth?: boolean;\n}\n\nexport type LucideIcon = ForwardRefExoticComponent<LucideProps>;\n/**\n * Converts string to KebabCase\n * Copied from scripts/helper. If anyone knows how to properly import it here\n * then please fix it.\n *\n * @param {string} string\n * @returns {string} A kebabized string\n */\nexport const toKebabCase = (string: string) =>\n  string\n    .replace(/([a-z0-9])([A-Z])/g, '$1-$2')\n    .toLowerCase()\n    .trim();\n\nconst createLucideIcon = (iconName: string, iconNode: IconNode): LucideIcon => {\n  const Component = forwardRef<SVGSVGElement, LucideProps>(\n    (\n      {\n        color = 'currentColor',\n        size = 24,\n        strokeWidth = 2,\n        absoluteStrokeWidth,\n        className = '',\n        children,\n        ...rest\n      },\n      ref,\n    ) => {\n      return createElement(\n        'svg',\n        {\n          ref,\n          ...defaultAttributes,\n          width: size,\n          height: size,\n          stroke: color,\n          strokeWidth: absoluteStrokeWidth\n            ? (Number(strokeWidth) * 24) / Number(size)\n            : strokeWidth,\n          className: ['lucide', `lucide-${toKebabCase(iconName)}`, className].join(' '),\n          ...rest,\n        },\n        [\n          ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n          ...(Array.isArray(children) ? children : [children]),\n        ],\n      );\n    },\n  );\n\n  Component.displayName = `${iconName}`;\n\n  return Component;\n};\n\nexport default createLucideIcon;\n"],
  "mappings": ";;;;;;;;;AAAA,IAAe,oBAAA;EACb,OAAO;EACP,OAAO;EACP,QAAQ;EACR,SAAS;EACT,MAAM;EACN,QAAQ;EACR,aAAa;EACb,eAAe;EACf,gBAAgB;AAClB;;;ACmBa,IAAA,cAAc,CAAC,WAC1B,OACG,QAAQ,sBAAsB,OAAO,EACrC,YAAY,EACZ,KAAK;AAEJ,IAAA,mBAAmB,CAAC,UAAkB,aAAmC;AAC7E,QAAM,gBAAY;IAChB,CACE;MACE,QAAQ;MACR,OAAO;MACP,cAAc;MACd;MACA,YAAY;MACZ;MACA,GAAG;IAAA,GAEL,QACG;AACI,iBAAA;QACL;QACA;UACE;UACA,GAAG;UACH,OAAO;UACP,QAAQ;UACR,QAAQ;UACR,aAAa,sBACR,OAAO,WAAW,IAAI,KAAM,OAAO,IAAI,IACxC;UACJ,WAAW,CAAC,UAAU,UAAU,YAAY,QAAQ,CAAC,IAAI,SAAS,EAAE,KAAK,GAAG;UAC5E,GAAG;QACL;QACA;UACE,GAAG,SAAS,IAAI,CAAC,CAAC,KAAK,KAAK,UAAM,4BAAc,KAAK,KAAK,CAAC;UAC3D,GAAI,MAAM,QAAQ,QAAQ,IAAI,WAAW,CAAC,QAAQ;QACpD;MAAA;IAEJ;EAAA;AAGQ,YAAA,cAAc,GAAG,QAAQ;AAE5B,SAAA;AACT;",
  "names": []
}
